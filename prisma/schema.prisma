// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Task {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  name              String
  description       String?
  acceptanceCriteria String?
  startedAt         DateTime
  completedAt       DateTime
  deadlineAt        DateTime
  status            String   @default("to-do")
  comments          String[]
  workedOnDays      Day[]    @relation(fields: [workedOnDayIds], references: [id])
  workedOnDayIds    String[]  @db.ObjectId
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model Day {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  date              DateTime @unique
  tasks             Task[]   @relation(fields: [taskIds], references: [id])
  taskIds           String[]  @db.ObjectId
  week              Week      @relation(fields: [weekId], references: [id], onDelete: Cascade)
  weekId            String    @db.ObjectId
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model Week {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  days              Day[]
  dayIds            String[] @db.ObjectId
  month             Month    @relation(fields: [monthId], references: [id], onDelete: Cascade)
  monthId           String   @db.ObjectId
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model Month {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  monthNumber       Int
  weeks             Week[]
  weekIds           String[] @db.ObjectId
  year              Year     @relation(fields: [yearId], references: [id], onDelete: Cascade)
  yearId            String   @db.ObjectId
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@unique([yearId, monthNumber]) // Unique constraint
}

model Year {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  yearNumber        Int      @unique
  months            Month[]
  monthIds          String[] @db.ObjectId
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}